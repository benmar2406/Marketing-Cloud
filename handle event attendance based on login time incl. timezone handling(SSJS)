<script runat="server">
Platform.Load("core", "1");

var cId = Request.GetQueryStringParameter("cid");
var encodedEventLink = Request.GetQueryStringParameter("eventLink");
if(encodedEventLink) {
    var eventLink = decodeURIComponent(encodedEventLink);
  }
var dstActiveString = Request.GetQueryStringParameter("isDst");
var dstActive = dstActiveString === "true"; // dstActive wird zu true (boolesch), wenn der String "true" ist, sonst false.
var eventStartDateTime = Request.GetQueryStringParameter("eventStartDateTime");  
var eventStartCET = new Date(eventStartDateTime);
var eventEndDateTime = Request.GetQueryStringParameter("eventEndDateTime");  
var eventEndCET = new Date(eventEndDateTime);

try {     
    // Validate Date and check link, only if a link exists the user can be redirected to the event page thus only then can be logged as attended
    if (!isNaN(eventStartCET.getTime()) && eventLink) {
        var now = new Date(); //Get the current date and time in GMT-6 (server time)
         Write("now: " + now + "<br>");
        if (dstActive === false) {
            var cetOffsetHours = 7; //Standard CET is UTC+1, and server is GMT-6, so the difference is 7 hours in wintertime
        } else {
            var cetOffsetHours = 8; //8 hrs in summertime
        } 
        var fromHoursToMilliSecs = 3600000;
        var nowCET = new Date(now.getTime() + cetOffsetHours * fromHoursToMilliSecs); //since date object calculates in milliseconds cetOffsetHours needs to be multiplied by 60000 to change from hours to milliseconds
        Write("nowCET: " + nowCET + "<br>");
      
        var minutesBeforeEvent = 15;
        var checkinTime = new Date(eventStartCET.getTime() - minutesBeforeEvent * 60000); //since date object calculates in milliseconds minutesBeforeEvent needs to be multiplied by 60000 to change to milliseconds
        Write("checkinTime" + checkinTime + "<br>")
        if (nowCET >= checkinTime && nowCET <= eventEndCET) {
            //Log the user since the click can be counted as attendance.
             Write("Log user");
            var cmId = Variable.GetValue("@cmId");
            var updateAttendance = Platform.Function.TreatAsContent('%%[' +
            'SET @updateResult = UpdateSingleSalesforceObject("CampaignMember", "' + cmId + '", "Status", "Teilgenommen")' +
            ']%%');
        
        } else {
            //Don't log the user since it is no plausible time to attend.
        }

    } else {
        
    }
      
} catch (ex) {
    //Log error to data extension.
    logError(ex, cId);

}

//A user should always be redirected to the event page no matter if the attendance logging was successful. Since a try / catch block doesn't work with a redirect (since the user immediately is redirected the promise can't be resolved when the link is correct thus always ending in the catch block)
//A formally correct event link is ensured through being a (required) Url field in Core Cloud

if (eventLink) {
        Platform.Response.Redirect(eventLink)
    }

else {
        logError("Invalid Link", cId);
        redirect = "https://placeholder-error-site.com"
        Platform.Response.Redirect(redirect)
    }



// Function to log to data extension.
function logError(errorMessage, conId) {
    var logDE = DataExtension.Init("49D23AF8-3E4C-4226-89D1-EFACB71A847F");
    var today = new Date();
    logDE.Rows.Add({ LogID: Platform.Function.GUID(), Level: "critical", Source: "Cloud Page: Event Registration", Message: errorMessage, ContactId: conId, CreatedAt: today });
}

</script>
